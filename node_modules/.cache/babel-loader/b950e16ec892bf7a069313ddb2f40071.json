{"ast":null,"code":"var _jsxFileName = \"/Users/OEM/Desktop/GeekBrains/ReactJS/social/my-app/src/MessageList.jsx\",\n    _s = $RefreshSig$();\n\nimport { datatype } from 'faker/locale/zh_TW';\nimport './messageList.css';\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MessageList = props => {\n  _s();\n\n  const answerBot = () => {\n    setTimeout(() => props.classNamesetMesssageList([...props.messageList, {\n      text: \"hello i'm Bot. What is your name?\",\n      user: \"RoBot\"\n    }]), 1500);\n  };\n\n  const scrollToBottom = () => {\n    setTimeout(() => scroll.scrollToBottom(\"smooth\"), 1500);\n  };\n\n  useEffect(() => {\n    var _messageList;\n\n    if (((_messageList = messageList[messageList.length - 1]) === null || _messageList === void 0 ? void 0 : _messageList.user) === user) {\n      answerBot();\n      scrollToBottom();\n      return () => clearTimeout(answerBot, scrollToBottom);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: props.messageList.map(({\n      text,\n      user\n    }) => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"comment\",\n      children: [text, /*#__PURE__*/_jsxDEV(\"span\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 65\n      }, this)]\n    }, datatype.uuid(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MessageList, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MessageList;\nexport default MessageList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"sources":["/Users/OEM/Desktop/GeekBrains/ReactJS/social/my-app/src/MessageList.jsx"],"names":["datatype","animateScroll","scroll","useEffect","MessageList","props","answerBot","setTimeout","classNamesetMesssageList","messageList","text","user","scrollToBottom","length","clearTimeout","map","uuid"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,OAAO,mBAAP;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,cAAxC;AACA,SAAQC,SAAR,QAAyB,OAAzB;;;AAGA,MAAMC,WAAW,GAAGC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,SAAS,GAAG,MAAM;AACpBC,IAAAA,UAAU,CACR,MACAF,KAAK,CAACG,wBAAN,CAA+B,CAC7B,GAAGH,KAAK,CAACI,WADoB,EAE7B;AAACC,MAAAA,IAAI,EAAC,mCAAN;AAA2CC,MAAAA,IAAI,EAAC;AAAhD,KAF6B,CAA/B,CAFQ,EAMR,IANQ,CAAV;AAQD,GATH;;AAWE,QAAMC,cAAc,GAAG,MAAM;AAC3BL,IAAAA,UAAU,CAAC,MACTL,MAAM,CAACU,cAAP,CAAsB,QAAtB,CADQ,EAER,IAFQ,CAAV;AAID,GALD;;AAOAT,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAI,iBAAAM,WAAW,CAACA,WAAW,CAACI,MAAZ,GAAqB,CAAtB,CAAX,8DAAqCF,IAArC,MAA8CA,IAAlD,EAAwD;AACtDL,MAAAA,SAAS;AACTM,MAAAA,cAAc;AACd,aAAO,MAAME,YAAY,CAACR,SAAD,EAAYM,cAAZ,CAAzB;AACD;AACF,GANQ,CAAT;AAOF,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,cACCP,KAAK,CAACI,WAAN,CAAkBM,GAAlB,CAAsB,CAAC;AAACL,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAD,kBACnB;AAAG,MAAA,SAAS,EAAE,SAAd;AAAA,iBAA+CD,IAA/C,eAAoD;AAAA,kBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,cAApD;AAAA,OAA6BX,QAAQ,CAACgB,IAAT,EAA7B;AAAA;AAAA;AAAA;AAAA,YADH;AADD;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAjCD;;GAAMZ,W;;KAAAA,W;AAmCN,eAAeA,WAAf","sourcesContent":["import { datatype } from 'faker/locale/zh_TW';\nimport './messageList.css';\nimport { animateScroll as scroll } from \"react-scroll\";\nimport {useEffect } from 'react';\n\n\nconst MessageList= (props) => {\n    const answerBot = () => {\n        setTimeout(\n          () => \n          props.classNamesetMesssageList([\n            ...props.messageList,\n            {text:\"hello i'm Bot. What is your name?\", user:\"RoBot\" },\n          ]),\n          1500\n        );\n      };\n    \n      const scrollToBottom = () => {\n        setTimeout(() =>\n          scroll.scrollToBottom(\"smooth\"),\n          1500\n        )\n      }\n    \n      useEffect(() => {\n        if (messageList[messageList.length - 1]?.user === user) {\n          answerBot();\n          scrollToBottom();\n          return () => clearTimeout(answerBot, scrollToBottom);\n        }\n      }, );\n    return (\n        <div className=\"comments\">\n        {props.messageList.map(({text, user}) => (\n            <p className= 'comment' key={datatype.uuid()}>{text}<span>{user}</span></p>\n        ))}\n        </div>\n    );\n};\n\nexport default MessageList;"]},"metadata":{},"sourceType":"module"}